{
  "_args": [
    [
      {
        "raw": "xxhashjs@https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
        "scope": null,
        "escapedName": "xxhashjs",
        "name": "xxhashjs",
        "rawSpec": "https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
        "spec": "https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
        "type": "remote"
      },
      "/home/fruitmix/build/release/appifi-release"
    ]
  ],
  "_from": "xxhashjs@>=0.2.1 <0.3.0",
  "_id": "xxhashjs@0.2.1",
  "_inCache": true,
  "_location": "/xxhashjs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xxhashjs@https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
    "scope": null,
    "escapedName": "xxhashjs",
    "name": "xxhashjs",
    "rawSpec": "https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
    "spec": "https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
  "_shasum": "9bbe9be896142976dfa34c061b2d068c43d30de0",
  "_shrinkwrap": null,
  "_spec": "xxhashjs@https://registry.npmjs.org/xxhashjs/-/xxhashjs-0.2.1.tgz",
  "_where": "/home/fruitmix/build/release/appifi-release",
  "author": {
    "name": "Pierre Curto"
  },
  "bugs": {
    "url": "https://github.com/pierrec/js-xxhash/issues"
  },
  "dependencies": {
    "cuint": "latest"
  },
  "description": "xxHash in Javascript",
  "devDependencies": {
    "benchmark": "*",
    "uglifyjs": "*",
    "webpack": "*"
  },
  "homepage": "https://github.com/pierrec/js-xxhash",
  "keywords": [
    "xxhash",
    "xxh"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "xxhashjs",
  "optionalDependencies": {},
  "readme": "# Javascript implementation of xxHash\n\n## Synopsis\n\nxxHash is a very fast hashing algorithm (see the details [here](https://code.google.com/p/xxhash/)). xxhashjs is a Javascript implementation of it, written in 100% Javascript. Although not as fast as the C version, it does perform pretty well given the current Javascript limitations in handling unsigned 32 bits integers.\n\n\n## Installation\n\nIn nodejs:\n\n    npm install xxhashjs\n\nIn the browser, include the following, and access the constructor with _XXH_:\n\n```javascript\n<script src=\"/your/path/to/xxhash.lmd.js\"></script>\n```\n\n\n## Examples\n\n* In one step:\n```javascript\nvar h = XXH( 'abcd', 0xABCD ).toString(16)\t// seed = 0xABCD\n```\n> 0xCDA8FAE4\n\n* In several steps (useful in conjunction of NodeJS streams):\n```javascript\nvar H = XXH( 0xABCD )\t// seed = 0xABCD\nvar h = H.update( 'abcd' ).digest().toString(16)\n```\n> 0xCDA8FAE4\n\n* More examples in the examples directory:\n\t* Compute xxHash from a file data\n\t* Use xxHashjs in the browser\n\n\n## Usage\n\n* In one step:\n`XXH(<data>, <seed>)`\nThe data can either be a string, an ArrayBuffer or a NodeJS Buffer object.\nThe seed can either be a number or a UINT32 object.\n\n* In several steps:\n\t* instantiate a new XXH object:\n`XXH(<seed>)` or `XXH()`\nThe seed can be set later on with the `init` method\n\n\t* add data to the hash calculation:\n`XXH.update(<data>)`\n\n\t* finish the calculations:\n`XXH.digest()`\n\nThe object returned can be converted to a string with `toString(<radix>)` or a number `toNumber()`.\nOnce `digest()` has been called, the object can be reused. The same seed will be used or it can be changed with `init(<seed>)`.\n\n\n## Methods\n\n* `XXH.init(<seed>)`\nInitialize the XXH object with the given seed. The seed can either be a number or a UINT32 object.\n* `XXH.update(<data>)`\nAdd data for hashing. The data can either be a string, an ArrayBuffer or a NodeJS Buffer object.\n* `XXH.digest()` (_UINT32_)\nFinalize the hash calculations and returns an UINT32 object. The hash value can be retrived with toString(<radix>).\n\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pierrec/js-xxhash.git"
  },
  "scripts": {
    "prepublish": "webpack && uglifyjs -m -c -o build/xxhash.min.js build/xxhash.js",
    "test": "mocha"
  },
  "version": "0.2.1"
}
