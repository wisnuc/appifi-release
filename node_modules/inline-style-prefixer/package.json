{
  "_args": [
    [
      {
        "name": "inline-style-prefixer",
        "raw": "inline-style-prefixer@https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
        "rawSpec": "https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
        "scope": null,
        "spec": "https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
        "type": "remote"
      },
      "/home/wisnuc/temp/release/appifi-release"
    ]
  ],
  "_from": "inline-style-prefixer@>=2.0.0 <3.0.0",
  "_id": "inline-style-prefixer@2.0.1",
  "_inCache": true,
  "_location": "/inline-style-prefixer",
  "_phantomChildren": {},
  "_requested": {
    "name": "inline-style-prefixer",
    "raw": "inline-style-prefixer@https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
    "rawSpec": "https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/material-ui"
  ],
  "_resolved": "https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
  "_shasum": "ef8dfbf0631fee6d3d274bf9e4853554419faeca",
  "_shrinkwrap": null,
  "_spec": "inline-style-prefixer@https://registry.npmjs.org/inline-style-prefixer/-/inline-style-prefixer-2.0.1.tgz",
  "_where": "/home/wisnuc/temp/release/appifi-release",
  "author": {
    "name": "Robin Frischmann"
  },
  "babel": {
    "plugins": [
      "transform-class-properties",
      "add-module-exports"
    ],
    "presets": [
      "es2015",
      "stage-0"
    ]
  },
  "bugs": {
    "url": "https://github.com/rofrischmann/inline-style-prefixer/issues"
  },
  "dependencies": {
    "bowser": "^1.0.0",
    "hyphenate-style-name": "^1.0.1"
  },
  "description": "Autoprefixer for inline styles using userAgent and caniuse data",
  "devDependencies": {
    "babel": "^6.5.2",
    "babel-cli": "^6.6.0",
    "babel-core": "^6.6.0",
    "babel-eslint": "^5.0.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-class-properties": "^6.9.1",
    "babel-preset-es2015-rollup": "^1.1.1",
    "babel-preset-stage-0": "^6.5.0",
    "caniuse-api": "^1.5.0",
    "chai": "^3.2.0",
    "codeclimate-test-reporter": "^0.1.1",
    "cross-env": "^1.0.8",
    "esformatter": "^0.8.1",
    "esformatter-braces": "^1.2.1",
    "esformatter-collapse-objects": "^0.5.1",
    "esformatter-dot-notation": "^1.3.1",
    "esformatter-literal-notation": "^1.0.1",
    "esformatter-parseint": "^1.0.3",
    "esformatter-quote-props": "^1.0.2",
    "esformatter-quotes": "^1.0.3",
    "esformatter-remove-trailing-commas": "^1.0.1",
    "esformatter-spaced-lined-comment": "^2.0.1",
    "esformatter-var-each": "^2.1.0",
    "istanbul": "1.0.0-alpha.2",
    "mocha": "^2.2.5",
    "object-assign": "^4.0.1",
    "rimraf": "^2.4.2",
    "rollup": "0.26.3",
    "rollup-plugin-babel": "2.4.0",
    "rollup-plugin-commonjs": "2.2.1",
    "rollup-plugin-node-resolve": "1.5.0",
    "rollup-plugin-uglify": "0.3.1"
  },
  "engines": {
    "node": ">=0.12"
  },
  "esformatter": {
    "indent": {
      "ArrayExpression": 1,
      "ArrowFunctionExpression": 1,
      "AssignmentExpression": 1,
      "AssignmentExpression.BinaryExpression": 1,
      "AssignmentExpression.LogicalExpression": 1,
      "AssignmentExpression.UnaryExpression": 1,
      "CallExpression": 1,
      "CallExpression.BinaryExpression": 1,
      "CallExpression.LogicalExpression": 1,
      "CallExpression.UnaryExpression": 1,
      "CatchClause": 1,
      "ClassDeclaration": 1,
      "CommentInsideEmptyBlock": 1,
      "ConditionalExpression": 1,
      "DoWhileStatement": 1,
      "ForInStatement": 1,
      "ForStatement": 1,
      "FunctionDeclaration": 1,
      "FunctionExpression": 1,
      "IfStatement": 1,
      "MemberExpression": 1,
      "MultipleVariableDeclaration": 1,
      "NewExpression": 1,
      "ObjectExpression": 1,
      "ObjectExpression.BinaryExpression": 1,
      "ObjectExpression.LogicalExpression": 1,
      "ObjectExpression.UnaryExpression": 1,
      "ParameterList": 1,
      "ReturnStatement": 1,
      "SwitchCase": 1,
      "SwitchStatement": 1,
      "TopLevelFunctionBlock": 1,
      "TryStatement": 1,
      "VariableDeclaration.BinaryExpression": 1,
      "VariableDeclaration.LogicalExpression": 1,
      "VariableDeclaration.UnaryExpression": 1,
      "WhileStatement": 1,
      "alignComments": true,
      "value": "  "
    },
    "jsx": {
      "alignWithFirstAttribute": false,
      "attrsOnSameLineAsTag": true,
      "firstAttributeOnSameLine": false,
      "formatJSX": true,
      "htmlOptions": {
        "brace_style": "collapse",
        "indent_char": " ",
        "indent_size": 2,
        "max_preserve_newlines": 4,
        "preserve_newlines": true,
        "wrap_line_length": 250
      },
      "maxAttrsOnTag": 4,
      "spaceInJSXExpressionContainers": ""
    },
    "lineBreak": {
      "after": {
        "ArrowFunctionExpressionArrow": 0,
        "ArrowFunctionExpressionClosingBrace": -1,
        "ArrowFunctionExpressionOpeningBrace": ">=1",
        "AssignmentExpression": ">=1",
        "AssignmentOperator": 0,
        "BlockStatement": 0,
        "BreakKeyword": -1,
        "CallExpression": -1,
        "CallExpressionClosingParentheses": -1,
        "CallExpressionOpeningParentheses": -1,
        "CatchClosingBrace": ">=0",
        "CatchKeyword": 0,
        "CatchOpeningBrace": ">=1",
        "ClassDeclaration": ">=1",
        "ClassDeclarationClosingBrace": ">=1",
        "ClassDeclarationOpeningBrace": ">=1",
        "ConditionalExpression": ">=1",
        "DeleteOperator": ">=1",
        "DoWhileStatement": ">=1",
        "DoWhileStatementClosingBrace": 0,
        "DoWhileStatementOpeningBrace": ">=1",
        "ElseIfStatement": ">=1",
        "ElseIfStatementClosingBrace": ">=1",
        "ElseIfStatementOpeningBrace": ">=1",
        "ElseStatement": ">=1",
        "ElseStatementClosingBrace": ">=1",
        "ElseStatementOpeningBrace": ">=1",
        "EmptyStatement": -1,
        "FinallyClosingBrace": ">=1",
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": ">=1",
        "ForInStatement": ">=1",
        "ForInStatementClosingBrace": ">=1",
        "ForInStatementExpressionClosing": -1,
        "ForInStatementExpressionOpening": "<2",
        "ForInStatementOpeningBrace": ">=1",
        "ForStatement": ">=1",
        "ForStatementClosingBrace": ">=1",
        "ForStatementExpressionClosing": -1,
        "ForStatementExpressionOpening": "<2",
        "ForStatementOpeningBrace": ">=1",
        "FunctionDeclaration": ">=1",
        "FunctionDeclarationClosingBrace": ">=1",
        "FunctionDeclarationOpeningBrace": ">=1",
        "FunctionExpression": ">=1",
        "FunctionExpressionClosingBrace": -1,
        "FunctionExpressionOpeningBrace": ">=1",
        "IIFEOpeningParentheses": 0,
        "IfStatement": ">=1",
        "IfStatementClosingBrace": ">=1",
        "IfStatementOpeningBrace": ">=1",
        "LogicalExpression": -1,
        "MethodDefinition": ">=1",
        "ObjectExpressionOpeningBrace": ">=1",
        "ParameterDefault": 0,
        "Property": 0,
        "PropertyName": 0,
        "ReturnStatement": -1,
        "SwitchClosingBrace": ">=1",
        "SwitchOpeningBrace": ">=1",
        "ThisExpression": 0,
        "ThrowStatement": ">=1",
        "TryClosingBrace": 0,
        "TryKeyword": -1,
        "TryOpeningBrace": ">=1",
        "VariableDeclaration": ">=1",
        "WhileStatement": ">=1",
        "WhileStatementClosingBrace": ">=1",
        "WhileStatementOpeningBrace": ">=1"
      },
      "before": {
        "ArrowFunctionExpressionArrow": 0,
        "ArrowFunctionExpressionClosingBrace": ">=1",
        "ArrowFunctionExpressionOpeningBrace": 0,
        "AssignmentExpression": ">=1",
        "AssignmentOperator": 0,
        "BlockStatement": 0,
        "BreakKeyword": ">=1",
        "CallExpression": -1,
        "CallExpressionClosingParentheses": -1,
        "CallExpressionOpeningParentheses": 0,
        "CatchClosingBrace": ">=1",
        "CatchKeyword": 0,
        "CatchOpeningBrace": 0,
        "ClassDeclaration": ">=1",
        "ClassDeclarationClosingBrace": ">=1",
        "ClassDeclarationOpeningBrace": 0,
        "ConditionalExpression": ">=1",
        "DeleteOperator": ">=1",
        "DoWhileStatement": ">=1",
        "DoWhileStatementClosingBrace": ">=1",
        "DoWhileStatementOpeningBrace": 0,
        "ElseIfStatement": 0,
        "ElseIfStatementClosingBrace": ">=1",
        "ElseIfStatementOpeningBrace": 0,
        "ElseStatement": 0,
        "ElseStatementClosingBrace": ">=1",
        "ElseStatementOpeningBrace": 0,
        "EmptyStatement": -1,
        "EndOfFile": -1,
        "FinallyClosingBrace": ">=1",
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": 0,
        "ForInStatement": ">=1",
        "ForInStatementClosingBrace": ">=1",
        "ForInStatementExpressionClosing": 0,
        "ForInStatementExpressionOpening": 0,
        "ForInStatementOpeningBrace": 0,
        "ForStatement": ">=1",
        "ForStatementClosingBrace": ">=1",
        "ForStatementExpressionClosing": "<2",
        "ForStatementExpressionOpening": 0,
        "ForStatementOpeningBrace": 0,
        "FunctionDeclaration": ">=1",
        "FunctionDeclarationClosingBrace": ">=1",
        "FunctionDeclarationOpeningBrace": 0,
        "FunctionExpression": -1,
        "FunctionExpressionClosingBrace": ">=1",
        "FunctionExpressionOpeningBrace": 0,
        "IIFEClosingParentheses": 0,
        "IfStatement": ">=1",
        "IfStatementClosingBrace": ">=1",
        "IfStatementOpeningBrace": 0,
        "LogicalExpression": -1,
        "MethodDefinition": ">=1",
        "ObjectExpressionClosingBrace": ">=1",
        "ParameterDefault": 0,
        "Property": ">=1",
        "PropertyValue": 0,
        "ReturnStatement": -1,
        "SwitchClosingBrace": ">=1",
        "SwitchOpeningBrace": 0,
        "ThisExpression": -1,
        "ThrowStatement": ">=1",
        "TryClosingBrace": ">=1",
        "TryKeyword": -1,
        "TryOpeningBrace": 0,
        "VariableDeclaration": ">=1",
        "VariableDeclarationWithoutInit": ">=1",
        "VariableName": ">=1",
        "VariableValue": 0,
        "WhileStatement": ">=1",
        "WhileStatementClosingBrace": ">=1",
        "WhileStatementOpeningBrace": 0
      },
      "value": "\n"
    },
    "plugins": [
      "esformatter-jsx",
      "esformatter-quotes",
      "esformatter-literal-notation",
      "esformatter-parseint",
      "esformatter-spaced-lined-comment",
      "esformatter-var-each",
      "esformatter-braces",
      "esformatter-dot-notation",
      "esformatter-remove-trailing-commas",
      "esformatter-collapse-objects",
      "esformatter-quote-props"
    ],
    "quotes": {
      "type": "single"
    },
    "whiteSpace": {
      "after": {
        "ArgumentComma": 1,
        "ArgumentList": 0,
        "ArrayExpressionClosing": 0,
        "ArrayExpressionComma": 1,
        "ArrayExpressionOpening": 1,
        "ArrayPatternClosing": 0,
        "ArrayPatternComma": 1,
        "ArrayPatternOpening": 1,
        "ArrowFunctionExpressionArrow": 1,
        "ArrowFunctionExpressionClosingBrace": 0,
        "ArrowFunctionExpressionOpeningBrace": 0,
        "AssignmentOperator": 1,
        "BinaryExpression": 0,
        "BinaryExpressionOperator": 1,
        "BlockComment": 1,
        "CallExpression": -1,
        "CallExpressionClosingParentheses": -1,
        "CallExpressionOpeningParentheses": -1,
        "CatchClosingBrace": 1,
        "CatchKeyword": 1,
        "CatchOpeningBrace": 1,
        "CatchParameterList": 0,
        "ClassDeclarationClosingBrace": 1,
        "ClassDeclarationOpeningBrace": 1,
        "CommaOperator": 1,
        "ConditionalExpressionConsequent": 1,
        "ConditionalExpressionTest": 1,
        "DoWhileStatementBody": 1,
        "DoWhileStatementClosingBrace": 1,
        "DoWhileStatementOpeningBrace": 1,
        "ElseIfStatementClosingBrace": 1,
        "ElseIfStatementOpeningBrace": 1,
        "ElseStatementClosingBrace": 1,
        "ElseStatementOpeningBrace": 1,
        "EmptyStatement": 0,
        "ExpressionOpeningParentheses": 0,
        "FinallyClosingBrace": 1,
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": 1,
        "ForInStatement": 1,
        "ForInStatementClosingBrace": 1,
        "ForInStatementExpressionClosing": 1,
        "ForInStatementExpressionOpening": 0,
        "ForInStatementOpeningBrace": 1,
        "ForStatement": 1,
        "ForStatementClosingBrace": 1,
        "ForStatementExpressionClosing": 1,
        "ForStatementExpressionOpening": 0,
        "ForStatementOpeningBrace": 1,
        "ForStatementSemicolon": 1,
        "FunctionDeclarationClosingBrace": 1,
        "FunctionDeclarationOpeningBrace": 1,
        "FunctionExpressionClosingBrace": 0,
        "FunctionExpressionOpeningBrace": 1,
        "FunctionName": 0,
        "FunctionReservedWord": 0,
        "IIFEOpeningParentheses": 0,
        "IfStatementClosingBrace": 1,
        "IfStatementConditionalClosing": 1,
        "IfStatementConditionalOpening": 0,
        "IfStatementOpeningBrace": 1,
        "LogicalExpressionOperator": 1,
        "MemberExpressionOpening": 0,
        "ObjectExpressionClosingBrace": 0,
        "ObjectExpressionOpeningBrace": 1,
        "ObjectPatternClosingBrace": 0,
        "ObjectPatternComma": 1,
        "ObjectPatternOpeningBrace": 1,
        "ParameterComma": 1,
        "ParameterDefault": 1,
        "ParameterList": 0,
        "PropertyName": 0,
        "PropertyValue": 0,
        "SwitchDiscriminantClosing": 1,
        "SwitchDiscriminantOpening": 0,
        "ThrowKeyword": 1,
        "TryClosingBrace": 1,
        "TryKeyword": -1,
        "TryOpeningBrace": 1,
        "UnaryExpressionOperator": 0,
        "VariableName": 1,
        "WhileStatementClosingBrace": 1,
        "WhileStatementConditionalClosing": 1,
        "WhileStatementConditionalOpening": 0,
        "WhileStatementOpeningBrace": 1
      },
      "before": {
        "ArgumentComma": 0,
        "ArgumentList": 0,
        "ArrayExpressionClosing": 1,
        "ArrayExpressionComma": 0,
        "ArrayExpressionOpening": 0,
        "ArrayPatternClosing": 1,
        "ArrayPatternComma": 0,
        "ArrayPatternOpening": 1,
        "ArrowFunctionExpressionArrow": 1,
        "ArrowFunctionExpressionClosingBrace": 0,
        "ArrowFunctionExpressionOpeningBrace": 1,
        "AssignmentOperator": 1,
        "BinaryExpression": 0,
        "BinaryExpressionOperator": 1,
        "BlockComment": 1,
        "CallExpression": -1,
        "CallExpressionClosingParentheses": -1,
        "CallExpressionOpeningParentheses": 0,
        "CatchClosingBrace": 1,
        "CatchKeyword": 1,
        "CatchOpeningBrace": 1,
        "CatchParameterList": 0,
        "ClassDeclarationClosingBrace": 1,
        "ClassDeclarationOpeningBrace": 1,
        "CommaOperator": 0,
        "ConditionalExpressionAlternate": 1,
        "ConditionalExpressionConsequent": 1,
        "DoWhileStatementClosingBrace": 1,
        "DoWhileStatementConditional": 1,
        "DoWhileStatementOpeningBrace": 1,
        "ElseIfStatementClosingBrace": 1,
        "ElseIfStatementOpeningBrace": 1,
        "ElseStatementClosingBrace": 1,
        "ElseStatementOpeningBrace": 1,
        "EmptyStatement": 0,
        "ExpressionClosingParentheses": 0,
        "FinallyClosingBrace": 1,
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": 1,
        "ForInStatement": 1,
        "ForInStatementClosingBrace": 1,
        "ForInStatementExpressionClosing": 0,
        "ForInStatementExpressionOpening": 1,
        "ForInStatementOpeningBrace": 1,
        "ForStatement": 1,
        "ForStatementClosingBrace": 1,
        "ForStatementExpressionClosing": 0,
        "ForStatementExpressionOpening": 1,
        "ForStatementOpeningBrace": 1,
        "ForStatementSemicolon": 0,
        "FunctionDeclarationClosingBrace": 1,
        "FunctionDeclarationOpeningBrace": 1,
        "FunctionExpressionClosingBrace": 1,
        "FunctionExpressionOpeningBrace": 1,
        "FunctionName": 1,
        "IIFEClosingParentheses": 0,
        "IfStatementClosingBrace": 1,
        "IfStatementConditionalClosing": 0,
        "IfStatementConditionalOpening": 1,
        "IfStatementOpeningBrace": 1,
        "LineComment": 1,
        "LogicalExpressionOperator": 1,
        "MemberExpressionClosing": 0,
        "ObjectExpressionClosingBrace": 1,
        "ObjectExpressionOpeningBrace": -1,
        "ObjectPatternClosingBrace": 1,
        "ObjectPatternComma": 0,
        "ObjectPatternOpeningBrace": 1,
        "ParameterComma": 0,
        "ParameterDefault": 1,
        "ParameterList": 0,
        "PropertyName": 1,
        "PropertyValue": 1,
        "SwitchDiscriminantClosing": 0,
        "SwitchDiscriminantOpening": 1,
        "ThrowKeyword": 1,
        "TryClosingBrace": 1,
        "TryKeyword": -1,
        "TryOpeningBrace": 1,
        "UnaryExpressionOperator": 0,
        "VariableName": 1,
        "VariableValue": 1,
        "WhileStatementClosingBrace": 1,
        "WhileStatementConditionalClosing": 0,
        "WhileStatementConditionalOpening": 1,
        "WhileStatementOpeningBrace": 1
      },
      "removeTrailing": 1,
      "value": " "
    }
  },
  "eslintConfig": {
    "env": {
      "browser": true,
      "mocha": true,
      "node": true
    },
    "extends": "eslint-config-rackt",
    "rules": {
      "eol-last": 0
    }
  },
  "files": [
    "LICENSE",
    "README.md",
    "lib/",
    "dist/",
    "static.js"
  ],
  "homepage": "https://github.com/rofrischmann/inline-style-prefixer#readme",
  "keywords": [
    "react",
    "react styling",
    "prefixer",
    "inline styles",
    "autoprefixer",
    "vendor prefix",
    "userAgent"
  ],
  "license": "MIT",
  "main": "lib/Prefixer.js",
  "name": "inline-style-prefixer",
  "optionalDependencies": {},
  "readme": "# inline-style-prefixer\n\n**inline-style-prefixer** adds required **vendor prefixes** to your style object. It only adds prefixes if they're actually required by evaluating the browser's `userAgent` against data from [caniuse.com](http://caniuse.com/).\n<br>\n\nAlternatively it ships a static version that adds all available vendor prefixes.\n\n[![Build Status](https://travis-ci.org/rofrischmann/inline-style-prefixer.svg)](https://travis-ci.org/rofrischmann/inline-style-prefixer)\n[![Test Coverage](https://codeclimate.com/github/rofrischmann/inline-style-prefixer/badges/coverage.svg)](https://codeclimate.com/github/rofrischmann/inline-style-prefixer/coverage)\n[![npm downloads](https://img.shields.io/npm/dm/inline-style-prefixer.svg)](https://img.shields.io/npm/dm/inline-style-prefixer.svg)\n![Dependencies](https://david-dm.org/rofrischmann/inline-style-prefixer.svg)\n![Gzipped Size](https://img.shields.io/badge/gzipped-8.50kb-brightgreen.svg)\n\n## Installation\n```sh\nnpm i --save inline-style-prefixer\n```\nAssuming you are using [npm](https://www.npmjs.com) as your package mananger you can `npm install` all packages. <br>\nOtherwise we also provide [UMD](https://github.com/umdjs/umd) builds for each package within the `dist` folder. You can easily use them via [npmcdn](https://npmcdn.com/).\n```HTML\n<!-- Unminified versions -->\n<script src=\"https://npmcdn.com/inline-style-prefixer@2.0.0/dist/inline-style-prefixer.js\"></script>\n<script src=\"https://npmcdn.com/inline-style-prefixer@2.0.0/dist/inline-style-prefix-all.js\"></script>\n<!-- Minified versions -->\n<script src=\"https://npmcdn.com/inline-style-prefixer@2.0.0/dist/inline-style-prefixer.min.js\"></script>\n<script src=\"https://npmcdn.com/inline-style-prefixer@2.0.0/dist/inline-style-prefix-all.min.js\"></script>\n```\n\n# Browser Support\nSupports the major browsers with the following versions. <br>For legacy support check [custom build](#custom-build--legacy-support). We do not officially support any other browsers.<br>\nIt will **only** add prefixes if a property still needs them in one of the following browser versions.This means *e.g. `border-radius`* will not be prefixed at all.\n\n* Chrome: 30+\n* Safari: 6+\n* Firefox: 25+\n* Opera: 13+\n* IE: 9+\n* Edge 12+\n* iOS: 6+\n* Android: 4+\n* IE mobile: 9+\n* Opera mini: 5+\n* Android UC: 9+\n* Android Chrome: 30+\n\n### Fallback\nIf using an unsupported browser or even run without any `userAgent`, it will use [`inline-style-prefixer/static`](docs/API.md#pro-tip) as a fallback.\n\n\n## Example\n```javascript\nimport Prefixer from 'inline-style-prefixer'\n\nconst styles = {\n  transition: '200ms all linear',\n  userSelect: 'none',\n  boxSizing: 'border-box',\n  display: 'flex',\n  color: 'blue'\n}\n\nconst prefixer = new Prefixer({ userAgent: 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/25.0.1216.0 Safari/537.2'})\nconst prefixedStyles = prefixer.prefix(styles)\n\n// prefixedStyles === output\nconst output = {\n  transition: '200ms all linear',\n  WebkitUserSelect: 'none',\n  boxSizing: 'border-box',\n  display: '-webkit-flex',\n  color: 'blue'\n}\n```\n`inline-style-prefixer/static`\n\n![Gzipped Size](https://img.shields.io/badge/gzipped-2.40kb-brightgreen.svg)\n\nIf you only want to use the static version, you can import it directly to reduce file size. It was once shipped as a several package [inline-style-prefix-all](https://github.com/rofrischmann/inline-style-prefix-all).\n```javascript\nimport prefixAll from 'inline-style-prefixer/static'\n\nconst styles = {\n  transition: '200ms all linear',\n  boxSizing: 'border-box',\n  display: 'flex',\n  color: 'blue'\n}\n\nconst prefixedStyles = prefixAll(styles)\n\n// prefixedStyles === output\nconst output = {\n  WebkitTransition: '200ms all linear',\n  // Firefox dropped prefixed transition with version 16\n  // IE never supported prefixed transitions\n  transition: '200ms all linear',\n  MozBoxSizing: 'border-box',\n  // Firefox up to version 28 needs a prefix\n  // Others dropped prefixes out of scope\n  boxSizing: 'border-box',\n  // Fallback/prefixed values get grouped in arrays\n  // The prefixer does not resolve those\n  display: ['-webkit-box', '-moz-box', '-ms-flexbox', '-webkit-flex', 'flex']\n  color: 'blue'\n}\n```\n\n## Documentation\nIf you got any issue using this prefixer, please first check the FAQ's. Most cases are already covered and provide a solid solution.\n\n* [API Reference](docs/API.md)\n* [Supported Properties](docs/Properties.md)\n* [Special Plugins](docs/Plugins.md)\n* [FAQ](docs/FAQ.md)\n\n# Custom Build & Legacy Support\nYou may have to create a custom build if you need older browser versions. Just modify the [config.js](config.js) file which includes all the browser version specifications.\n```sh\nnpm install\nnpm run build\n```\n\n# License\n**inline-style-prefixer** is licensed under the [MIT License](http://opensource.org/licenses/MIT).<br>\nDocumentation is licensed under [Creative Common License](http://creativecommons.org/licenses/by/4.0/).<br>\nCreated with ♥ by [@rofrischmann](http://rofrischmann.de).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rofrischmann/inline-style-prefixer.git"
  },
  "scripts": {
    "babel": "babel modules/ --out-dir lib",
    "build": "npm run clean && mkdir dist && npm run babel && npm run generate && npm run dist",
    "clean": "rimraf lib dist coverage",
    "coverage": "codeclimate-test-reporter < coverage/lcov.info",
    "dist": "cross-env NODE_ENV=production babel-node buildPackage && cross-env NODE_ENV=development babel-node buildPackage",
    "generate": "babel-node generator/generateData.js",
    "pretest": "npm run clean && npm run babel && npm run generate",
    "release": "npm run build && npm publish",
    "test": "istanbul cover _mocha -- --recursive --compilers js:babel-core/register"
  },
  "version": "2.0.1"
}
