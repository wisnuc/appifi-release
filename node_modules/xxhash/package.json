{
  "_args": [
    [
      {
        "raw": "xxhash@https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
        "scope": null,
        "escapedName": "xxhash",
        "name": "xxhash",
        "rawSpec": "https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
        "spec": "https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
        "type": "remote"
      },
      "/home/newvm/build/release/appifi-release"
    ]
  ],
  "_from": "xxhash@>=0.2.4 <0.3.0",
  "_id": "xxhash@0.2.4",
  "_inCache": true,
  "_location": "/xxhash",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xxhash@https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
    "scope": null,
    "escapedName": "xxhash",
    "name": "xxhash",
    "rawSpec": "https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
    "spec": "https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
  "_shasum": "8b8a48162cfccc21b920fa500261187d40216c39",
  "_shrinkwrap": null,
  "_spec": "xxhash@https://registry.npmjs.org/xxhash/-/xxhash-0.2.4.tgz",
  "_where": "/home/newvm/build/release/appifi-release",
  "author": {
    "name": "Brian White",
    "email": "mscdex@mscdex.net"
  },
  "bugs": {
    "url": "https://github.com/mscdex/node-xxhash/issues"
  },
  "dependencies": {
    "nan": "^2.4.0"
  },
  "description": "An xxhash binding for node.js",
  "devDependencies": {},
  "engines": {
    "node": ">=0.10.0"
  },
  "gypfile": true,
  "homepage": "https://github.com/mscdex/node-xxhash#readme",
  "keywords": [
    "hash",
    "xxhash",
    "fast",
    "streaming"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/mscdex/node-xxhash/master/LICENSE"
    }
  ],
  "main": "./lib/xxhash",
  "name": "xxhash",
  "optionalDependencies": {},
  "readme": "\nDescription\n===========\n\nAn [xxhash](https://github.com/Cyan4973/xxHash) binding for [node.js](http://nodejs.org/).\n\n[![Build Status](https://travis-ci.org/mscdex/node-xxhash.svg?branch=master)](https://travis-ci.org/mscdex/node-xxhash)\n[![Build status](https://ci.appveyor.com/api/projects/status/y2f8pisjshf4g181)](https://ci.appveyor.com/project/mscdex/node-xxhash)\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.10.0 or newer\n\n\nInstall\n============\n\n    npm install xxhash\n\n\nExamples\n========\n\n* Hash a file in one step:\n\n```javascript\nvar XXHash = require('xxhash'),\n    fs = require('fs');\n\nvar file = fs.readFileSync('somefile'),\n    result = XXHash.hash(file, 0xCAFEBABE);\n```\n\n* Hash a file in multiple steps:\n\n```javascript\nvar XXHash = require('xxhash'),\n    fs = require('fs');\n\nvar hasher = new XXHash(0xCAFEBABE);\n\nfs.createReadStream('somefile')\n  .on('data', function(data) {\n    hasher.update(data);\n  })\n  .on('end', function() {\n    console.log('Hash value = ' + hasher.digest());\n  });\n```\n\n* Hash a file with a hash stream:\n\n```javascript\nvar HashStream = require('xxhash').Stream,\n    fs = require('fs');\n\nvar hasher = new HashStream(0xCAFEBABE);\n\nfs.createReadStream('somefile')\n  .pipe(hasher)\n  .on('finish', function() {\n    console.log('Hash value = ' + hasher.read());\n  });\n```\n\n\nAPI\n===\n\nXXHash Static Methods\n---------------------\n\n* **hash**(< _Buffer_ >data, < _mixed_ >seed[, < _mixed_ >encbuf]) - _mixed_ - Performs a single/one-time 32-bit hash of `data` with the given `seed`. `seed` can be an unsigned integer or a Buffer containing (1 <= n <= 4) bytes to use for the seed. The resulting hash is returned. The format of the hash depends on the value of `encbuf`. If `encbuf` is a string and one of: `buffer`, `hex`, `base64`, or `binary`, then the hash value will be encoded in the appropriate format. If `encbuf` is a _Buffer_ of at least 4 bytes, then the hash value will be written to `encbuf` and `encbuf` will be returned. Otherwise, if `encbuf` is not supplied, then the hash will be an unsigned integer.\n\n* **hash64**(< _Buffer_ >data, < _mixed_ >seed[, < _mixed_ >encbuf]) - _mixed_ - Performs a single/one-time 64-bit hash of `data` with the given `seed`. `seed` can be an unsigned integer or a Buffer containing (1 <= n <= 8) bytes to use for the seed. The resulting hash is returned. The format of the hash depends on the value of `encbuf`. If `encbuf` is a string and one of: `buffer`, `hex`, `base64`, or `binary`, then the hash value will be encoded in the appropriate format. If `encbuf` is a _Buffer_ of at least 8 bytes, then the hash value will be written to `encbuf` and `encbuf` will be returned. The default value for `encbuf` is `'buffer'`.\n\n\nXXHash Static Properties\n------------------------\n\n* **Stream(< _mixed_ >seed[, < _integer_ >bits][, < _mixed_ >encbuf])** - _DuplexStream_ - A stream constructor that takes in the `seed` to use. Write data to the stream and when the stream ends, a `bits`-bit (32 or 64) hash value (format determined by `encbuf`) is available on the readable side. The values for `seed` and `encbuf` are described above in `hash()`.\n\n* **XXHash64(< _mixed_ >seed)** - This is the 64-bit Hash constructor. It is only needed if you want to use the old streaming interface (`update()`/`digest()`) instead of the streams2 interface described above.\n\n\nXXHash Methods\n--------------\n\n* **(constructor)**(< _mixed_ >seed) - Creates and returns a new 32-bit Hash instance with the given `seed`. The values for `seed` are described above in `hash()`.\n\n* **update**(< _Buffer_ >data) - _(void)_ - Update the hash using `data`.\n\n* **digest**([< _mixed_ >encbuf])  - _mixed_ - The values for `encbuf` and the resulting hash value format is described in `hash()`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mscdex/node-xxhash.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "node test/test.js"
  },
  "version": "0.2.4"
}
