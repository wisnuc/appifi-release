{
  "_args": [
    [
      {
        "raw": "respawn@https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
        "scope": null,
        "escapedName": "respawn",
        "name": "respawn",
        "rawSpec": "https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
        "spec": "https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
        "type": "remote"
      },
      "/home/newvm/build/release/appifi-release"
    ]
  ],
  "_from": "respawn@>=2.4.1 <3.0.0",
  "_id": "respawn@2.4.1",
  "_inCache": true,
  "_location": "/respawn",
  "_phantomChildren": {
    "object-keys": "0.4.0",
    "optimist": "0.2.8"
  },
  "_requested": {
    "raw": "respawn@https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
    "scope": null,
    "escapedName": "respawn",
    "name": "respawn",
    "rawSpec": "https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
    "spec": "https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
  "_shasum": "988eb7d9bdfdc3844c36612afd8d8cad76c28e0c",
  "_shrinkwrap": null,
  "_spec": "respawn@https://registry.npmjs.org/respawn/-/respawn-2.4.1.tgz",
  "_where": "/home/newvm/build/release/appifi-release",
  "author": {
    "name": "Mathias Buus",
    "email": "mathiasbuus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/respawn/issues"
  },
  "dependencies": {
    "ps-tree": "0.0.3",
    "xtend": "~2.1.1"
  },
  "description": "Spawn a process and restart it if it crashes",
  "devDependencies": {
    "tap": "~0.4.6"
  },
  "homepage": "https://github.com/mafintosh/respawn#readme",
  "keywords": [
    "spawn",
    "restart",
    "keep",
    "alive",
    "process",
    "monitor",
    "service",
    "start",
    "stop"
  ],
  "name": "respawn",
  "optionalDependencies": {},
  "readme": "# respawn\n\nSpawn a process and restart it if it crashes.\n\n```\nnpm install respawn\n```\n\n[![Build Status](https://travis-ci.org/mafintosh/respawn.png)](https://travis-ci.org/mafintosh/respawn)\n\n## Usage\n\nIt is easy to use\n\n``` js\nvar respawn = require('respawn')\n\nvar monitor = respawn(['node', 'server.js'], {\n  name: 'test',          // set monitor name\n  env: {ENV_VAR:'test'}, // set env vars\n  cwd: '.',              // set cwd\n  maxRestarts:10,        // how many restarts are allowed within 60s\n                         // or -1 for infinite restarts\n  sleep:1000,            // time to sleep between restarts,\n  kill:30000,            // wait 30s before force killing after stopping\n  stdio: [...]           // forward stdio options\n})\n\nmonitor.start() // spawn and watch\n```\n\nOptionally you can specify the command to to spawn in the option map as `command: [...]`\n\nPer default respawn will restart you app indefinitely. To set a max restart limit set the `maxRestarts` option.\n\nIf `sleep` is an array of numbers it will use the value at the position of the current number of restarts as the timeout value. If the number of restarts exceed the length of the array it will use the last value in the array until it hits the maxRestarts.\n\n`sleep: [1000, 60000, 60000, 12000, 1000]` will wait 1000ms before retrying, then it will wait 60000 before the next retry and so forth.\n\nIf `sleep` is a function it will be passed the number of times (including this one) that the app has been restarted (i.e. first time will be called with 1, second time 2 etc.) and should return a time in milliseconds.\n\n## API\n\n* `monitor.start()` Starts the monitor\n\n* `monitor.stop(cb)` Stops the monitor (kills the process if its running with SIGTERM)\n\n* `monitor.status` Get the current monitor status. Available values are `running`, `stopping`, `stopped`, `crashed` and `sleeping`\n\n## Events\n\n* `monitor.on('start')` The monitor has started\n\n* `monitor.on('stop')`  The monitor has fully stopped and the process is killed\n\n* `monitor.on('crash')`  The monitor has crashed (too many restarts or spawn error).\n\n* `monitor.on('sleep')` monitor is sleeping\n\n* `monitor.on('spawn', process)` New child process has been spawned\n\n* `monitor.on('exit', code, signal)` child process has exited\n\n* `monitor.on('stdout', data)` child process stdout has emitted data\n\n* `monitor.on('stderr', data)` child process stderr has emitted data\n\n* `monitor.on('warn', err)` child process has emitted an error\n\n## Graceful restart\n\nTo do graceful restart simply have your app stop gracefully when receiving `SIGTERM` and do\n\n``` js\n// graceful restart (do not wait for old process to die)\nmonitor.stop()\nmonitor.start()\n\n// hard restart (wait for old process to die)\nmonitor.stop(function() {\n  monitor.start()\n})\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/respawn.git"
  },
  "scripts": {
    "test": "tap test/index.js"
  },
  "version": "2.4.1"
}
